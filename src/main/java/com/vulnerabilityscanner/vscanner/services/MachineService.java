package com.vulnerabilityscanner.vscanner.services;

import com.vulnerabilityscanner.vscanner.dto.NvdResponse;
import com.vulnerabilityscanner.vscanner.entities.Machine;
import com.vulnerabilityscanner.vscanner.repositories.MachineRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class MachineService {

    @Autowired
    private MachineRepository machineRepository;

    @Autowired
    private MachineArchiveService machineArchiveService;

    @Autowired
    private NvdService nvdService;

    public List<Machine> findAll() {
        return machineRepository.findAll();
    }

    public Optional<Machine> findById(Long id) {
        return machineRepository.findById(id);
    }

    public Machine save(Machine machine) {
        String actionType = (machine.getId() == null) ? "CREATION" : "MODIFICATION";
        Machine savedMachine = machineRepository.save(machine);
        machineArchiveService.archive(savedMachine, actionType);
        return savedMachine;
    }

    public void deleteById(Long id) {
        Optional<Machine> machine = machineRepository.findById(id);
        machine.ifPresent(m -> {
            machineArchiveService.archive(m, "SUPPRESSION");
            machineRepository.deleteById(id);
        });
    }
    public List<Machine> getAllMachines() {
        return machineRepository.findAll();
    }

    public List<Machine> findVulnerableMachinesByFields() {
        List<Machine> allMachines = machineRepository.findAll();
        List<Machine> vulnerableMachines = new ArrayList<>();

        for (Machine machine : allMachines) {
            boolean isVulnerable = false;


            // Recherche par OS
            if (!isVulnerable && notEmpty(machine.getOperatingSystem())) {
                isVulnerable = hasHighSeverity(nvdService.searchCveItemsByKeyword(machine.getOperatingSystem()));
            }

            // Recherche par fabricant
            if (!isVulnerable && notEmpty(machine.getManufacturer())) {
                isVulnerable = hasHighSeverity(nvdService.searchCveItemsByKeyword(machine.getManufacturer()));
            }

            // Recherche par mod√®le
            if (!isVulnerable && notEmpty(machine.getModel())) {
                isVulnerable = hasHighSeverity(nvdService.searchCveItemsByKeyword(machine.getModel()));
            }

            if (isVulnerable) {
                vulnerableMachines.add(machine);
            }
        }

        return vulnerableMachines;
    }

    private boolean hasHighSeverity(List<NvdResponse.CveItem> cveItems) {
        return cveItems.stream()
                .anyMatch(cve -> {
                    Double score = cve.getCvss().getBaseScore();
                    return score != null && score >= 7.0;
                });
    }

    private boolean notEmpty(String s) {
        return s != null && !s.trim().isEmpty();
    }

}
