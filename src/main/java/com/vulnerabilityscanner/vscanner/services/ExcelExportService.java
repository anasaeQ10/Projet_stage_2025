package com.vulnerabilityscanner.vscanner.services;

import com.vulnerabilityscanner.vscanner.entities.User;
import com.vulnerabilityscanner.vscanner.entities.UserArchive;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
public class ExcelExportService {

    // Constantes de configuration
    private static final int MAX_FILE_SIZE_MB = 10;
    private static final int MAX_ROWS = 100_000;
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    private static final DateTimeFormatter SHEET_DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");

    public byte[] generateUsersReport(List<User> activeUsers, List<UserArchive> archivedUsers) throws IOException {
        validateInput(activeUsers, archivedUsers);

        try (Workbook workbook = new XSSFWorkbook()) {
            // Créer une feuille de métadonnées
            createMetadataSheet(workbook, activeUsers.size(), archivedUsers.size());

            CellStyle headerStyle = createHeaderStyle(workbook);
            createActiveUsersSheet(workbook, headerStyle, activeUsers);
            createArchivedUsersSheet(workbook, headerStyle, archivedUsers);

            return writeToByteArray(workbook);
        }
    }

    private void validateInput(List<User> activeUsers, List<UserArchive> archivedUsers) {
        if (activeUsers == null || archivedUsers == null) {
            throw new IllegalArgumentException("Les listes d'utilisateurs ne peuvent pas être null");
        }

        if (activeUsers.size() + archivedUsers.size() > MAX_ROWS) {
            throw new IllegalArgumentException(
                    String.format("Trop de données à exporter (max %d lignes)", MAX_ROWS));
        }
    }

    private void createMetadataSheet(Workbook workbook, int activeCount, int archivedCount) {
        Sheet metaSheet = workbook.createSheet("Métadonnées");

        // Style pour les titres
        CellStyle titleStyle = workbook.createCellStyle();
        Font titleFont = workbook.createFont();
        titleFont.setBold(true);
        titleFont.setFontHeightInPoints((short)14);
        titleStyle.setFont(titleFont);
        titleStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
        titleStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

        // Style pour les valeurs
        CellStyle valueStyle = workbook.createCellStyle();
        Font valueFont = workbook.createFont();
        valueFont.setFontHeightInPoints((short)12);
        valueStyle.setFont(valueFont);

        // Données de métadonnées
        Object[][] metadata = {
                {"Titre du rapport", "Rapport des utilisateurs"},
                {"Date d'exportation", LocalDateTime.now().format(DATE_FORMATTER)},
                {"Exporté par", getCurrentUsername()},
                {"Nombre d'utilisateurs actifs", activeCount},
                {"Nombre d'utilisateurs archivés", archivedCount},
                {"Total", activeCount + archivedCount}
        };

        // Remplir la feuille de métadonnées
        for (int i = 0; i < metadata.length; i++) {
            Row row = metaSheet.createRow(i);

            Cell titleCell = row.createCell(0);
            titleCell.setCellValue(metadata[i][0].toString());
            titleCell.setCellStyle(titleStyle);

            Cell valueCell = row.createCell(1);
            Object value = metadata[i][1];
            if (value instanceof Number) {
                valueCell.setCellValue(((Number) value).doubleValue());
            } else {
                valueCell.setCellValue(value.toString());
            }
            valueCell.setCellStyle(valueStyle);
        }

        // Ajuster la largeur des colonnes
        metaSheet.autoSizeColumn(0);
        metaSheet.autoSizeColumn(1);
    }

    private String getCurrentUsername() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return authentication != null ? authentication.getName() : "Système";
    }

    private CellStyle createHeaderStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        Font font = workbook.createFont();
        font.setBold(true);
        style.setFont(font);
        style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        return style;
    }

    private void createActiveUsersSheet(Workbook workbook, CellStyle headerStyle, List<User> users) {
        String sheetName = "Actifs_" + LocalDateTime.now().format(SHEET_DATE_FORMATTER);
        Sheet sheet = workbook.createSheet(sheetName);

        String[] headers = {
                "ID", "Matricule", "Nom", "Prénom", "Email", "Rôle",
                "Date Embauche", "Date Création", "Date Naissance",
                "Adresse", "Pays", "Ville", "Téléphone", "Mot de passe"
        };

        createSheetHeader(sheet, headerStyle, headers);
        fillUserData(sheet, users);
        autoSizeColumns(sheet, headers.length);
    }

    private void createArchivedUsersSheet(Workbook workbook, CellStyle headerStyle, List<UserArchive> users) {
        String sheetName = "Archives_" + LocalDateTime.now().format(SHEET_DATE_FORMATTER);
        Sheet sheet = workbook.createSheet(sheetName);

        String[] headers = {
                "ID", "Matricule", "Nom", "Prénom", "Email", "Rôle",
                "Date Archivage", "Type Action", "Date Création",
                "Date Naissance", "Date Embauche", "Adresse",
                "Pays", "Ville", "Téléphone", "Mot de passe"
        };

        createSheetHeader(sheet, headerStyle, headers);
        fillArchiveData(sheet, users);
        autoSizeColumns(sheet, headers.length);
    }

    private void createSheetHeader(Sheet sheet, CellStyle headerStyle, String[] headers) {
        Row headerRow = sheet.createRow(0);
        for (int i = 0; i < headers.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headers[i]);
            cell.setCellStyle(headerStyle);
        }
    }

    private void fillUserData(Sheet sheet, List<User> users) {
        int rowNum = 1;
        for (User user : users) {
            Row row = sheet.createRow(rowNum++);

            row.createCell(0).setCellValue(user.getId());
            row.createCell(1).setCellValue(getSafeString(user.getMatricule()));
            row.createCell(2).setCellValue(getSafeString(user.getNom()));
            row.createCell(3).setCellValue(getSafeString(user.getPrenom()));
            row.createCell(4).setCellValue(getSafeString(user.getEmail()));
            row.createCell(5).setCellValue(getSafeString(user.getRole()));
            row.createCell(6).setCellValue(formatDate(user.getDateEmbauche()));
            row.createCell(7).setCellValue(formatDate(user.getDateCreation()));
            row.createCell(8).setCellValue(formatDate(user.getDateNaissance()));
            row.createCell(9).setCellValue(getSafeString(user.getAdresse()));
            row.createCell(10).setCellValue(getSafeString(user.getPays()));
            row.createCell(11).setCellValue(getSafeString(user.getVille()));
            row.createCell(12).setCellValue(getSafeString(user.getTelephone()));
            row.createCell(13).setCellValue(getSafeString(user.getPassword()));
        }
    }

    private void fillArchiveData(Sheet sheet, List<UserArchive> users) {
        int rowNum = 1;
        for (UserArchive user : users) {
            Row row = sheet.createRow(rowNum++);

            row.createCell(0).setCellValue(user.getUserId());
            row.createCell(1).setCellValue(getSafeString(user.getMatricule()));
            row.createCell(2).setCellValue(getSafeString(user.getNom()));
            row.createCell(3).setCellValue(getSafeString(user.getPrenom()));
            row.createCell(4).setCellValue(getSafeString(user.getEmail()));
            row.createCell(5).setCellValue(getSafeString(user.getRole()));
            row.createCell(6).setCellValue(formatDate(user.getArchivedAt()));
            row.createCell(7).setCellValue(getSafeString(user.getActionType()));
            row.createCell(8).setCellValue(formatDate(user.getDateCreation()));
            row.createCell(9).setCellValue(formatDate(user.getDateNaissance()));
            row.createCell(10).setCellValue(formatDate(user.getDateEmbauche()));
            row.createCell(11).setCellValue(getSafeString(user.getAdresse()));
            row.createCell(12).setCellValue(getSafeString(user.getPays()));
            row.createCell(13).setCellValue(getSafeString(user.getVille()));
            row.createCell(14).setCellValue(getSafeString(user.getTelephone()));
            row.createCell(15).setCellValue(getSafeString(user.getPassword()));
        }
    }

    private String getSafeString(String value) {
        return value != null ? value : "";
    }

    private String formatDate(Object date) {
        if (date == null) return "";

        if (date instanceof java.time.LocalDateTime) {
            return ((java.time.LocalDateTime) date).format(DATE_FORMATTER);
        } else if (date instanceof java.time.LocalDate) {
            return ((java.time.LocalDate) date).atStartOfDay().format(DATE_FORMATTER);
        }
        return date.toString();
    }

    private void autoSizeColumns(Sheet sheet, int columnCount) {
        for (int i = 0; i < columnCount; i++) {
            sheet.autoSizeColumn(i);
        }
    }

    private byte[] writeToByteArray(Workbook workbook) throws IOException {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            workbook.write(outputStream);
            if (outputStream.size() > MAX_FILE_SIZE_MB * 1024 * 1024) {
                throw new IOException(
                        String.format("Le fichier excède la taille maximale de %dMB", MAX_FILE_SIZE_MB));
            }
            return outputStream.toByteArray();
        }
    }
}