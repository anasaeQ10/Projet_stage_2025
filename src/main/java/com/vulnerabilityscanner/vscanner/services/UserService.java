package com.vulnerabilityscanner.vscanner.services;

import com.vulnerabilityscanner.vscanner.entities.User;
import com.vulnerabilityscanner.vscanner.repositories.UserRepository;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    // Récupère l'utilisateur actuellement authentifié
    public User getCurrentUser(Authentication authentication) {
        String email = authentication.getName();
        return userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Utilisateur non trouvé"));
    }

    // Récupère tous les utilisateurs
    @Transactional(readOnly = true) // Important pour JPA
    public List<User> getAllUsers() {
        List<User> users = userRepository.findAll();

        // Vérification immédiate
        if(users.isEmpty()) {
            System.err.println("ATTENTION: Aucun utilisateur trouvé en base !");
        }

        return users;
    }

    // Recherche d'utilisateurs
    public List<User> searchUsers(String searchTerm) {
        return userRepository.findByNomContainingOrPrenomContainingOrEmailContaining(
                searchTerm, searchTerm, searchTerm);
    }

    // Récupère un utilisateur par son ID
    public User getUserById(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Utilisateur non trouvé"));
    }

    // Met à jour un utilisateur
    public void updateUser(User user) {
        userRepository.save(user);
    }

    // Supprime un utilisateur
    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }

    // Sauvegarde un nouvel utilisateur
    public User save(User user) {
        return userRepository.save(user);
    }

    // Vérifie si un email existe déjà
    public boolean emailExists(String email) {
        return userRepository.findByEmail(email).isPresent();
    }
}