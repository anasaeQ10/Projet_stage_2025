package com.vulnerabilityscanner.vscanner.services;

import com.vulnerabilityscanner.vscanner.entities.User;
import com.vulnerabilityscanner.vscanner.repositories.UserRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.security.core.Authentication;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class UserService implements UserDetailsService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final UserArchiveService archiveService;

    @Autowired
    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder, UserArchiveService archiveService) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.archiveService = archiveService;
    }

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("Utilisateur non trouvé avec l'email: " + email));

        return org.springframework.security.core.userdetails.User.builder()
                .username(user.getEmail())
                .password(user.getPassword())
                .roles(user.getRole().replace("ROLE_", ""))
                .build();
    }

    public void saveUser(User user) {
        boolean isNew = (user.getId() == null);

        if (!isNew) {
            User existingUser = userRepository.findById(user.getId())
                    .orElseThrow(() -> new EntityNotFoundException("Utilisateur non trouvé"));
            archiveService.archive(existingUser, "MODIFICATION");
        }

        user.setPassword(passwordEncoder.encode(user.getPassword()));

        if (user.getMatricule() == null || user.getMatricule().isEmpty()) {
            user.setMatricule(generateMatricule(user));
        }

        userRepository.save(user);

        if (isNew) {
            archiveService.archive(user, "CREATION");
        }
    }


    private String generateMatricule(User user) {
        String codePays = (user.getPays() != null && user.getPays().length() >= 2)
                ? user.getPays().substring(0, 2).toUpperCase()
                : "XX";

        String annee = (user.getDateEmbauche() != null)
                ? String.valueOf(user.getDateEmbauche().getYear())
                : String.valueOf(LocalDate.now().getYear());

        long nextId = userRepository.count() + 1; // ou autre méthode plus fiable
        String idStr = String.format("%03d", nextId); // ex : 001

        return codePays + "-" + idStr + "-" + annee;
    }


    public Optional<User> findByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    public boolean isPasswordUsed(String password) {
        return userRepository.existsByPassword(password);
    }

    public List<User> findAllUsers() {
        return userRepository.findAll();

    }

    public boolean existsByEmailAndIdNot(String email, Long id) {
        return userRepository.existsByEmailAndIdNot(email, id);
    }

    public User getCurrentUser(Authentication authentication) {
        String email = authentication.getName();
        return userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("Utilisateur non trouvé"));
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public List<User> searchUsers(String searchTerm) {
        return userRepository.findByNomContainingOrPrenomContainingOrEmailContaining(
                searchTerm, searchTerm, searchTerm);
    }

    public User getUserById(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Utilisateur non trouvé"));
    }

    public void updateUser(User user) {
        User existingUser = userRepository.findById(user.getId())
                .orElseThrow(() -> new EntityNotFoundException("Utilisateur non trouvé"));

        archiveService.archive(existingUser, "MODIFICATION");

        existingUser.setNom(user.getNom());
        existingUser.setPrenom(user.getPrenom());
        existingUser.setEmail(user.getEmail());
        existingUser.setRole(user.getRole());

        userRepository.save(existingUser);
    }


    public void deleteUser(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Utilisateur non trouvé"));

        archiveService.archive(user, "SUPPRESSION");

        userRepository.deleteById(id);
    }


}