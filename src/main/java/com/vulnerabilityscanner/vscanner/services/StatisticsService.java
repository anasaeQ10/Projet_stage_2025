package com.vulnerabilityscanner.vscanner.services;

import com.vulnerabilityscanner.vscanner.entities.CveDetailEntity;
import com.vulnerabilityscanner.vscanner.entities.Machine;
import com.vulnerabilityscanner.vscanner.entities.User;
import com.vulnerabilityscanner.vscanner.repositories.CveDetailRepository;
import com.vulnerabilityscanner.vscanner.repositories.MachineRepository;
import com.vulnerabilityscanner.vscanner.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.Month;
import java.time.format.TextStyle;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class StatisticsService {

    @Autowired
    private MachineRepository machineRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CveDetailRepository cveDetailRepository;

    public long getTotalMachines() {
        return machineRepository.count();
    }

    public Map<String, Long> getMachinesByType() {
        return machineRepository.findAll().stream()
                .collect(Collectors.groupingBy(Machine::getType, Collectors.counting()));
    }

    public Map<String, Long> getMachinesBySeverity() {
        return machineRepository.findAll().stream()
                .collect(Collectors.groupingBy(m -> {
                    double score = m.getCveScore();
                    if (score < 4) return "Securisé";
                    else if (score < 7) return "Attention";
                    else if (score < 9) return "Vérifier";
                    else return "Très dangereux";
                }, Collectors.counting()));
    }

    public long getTotalUsers() {
        return userRepository.count();
    }

    public long getAdminsCount() {
        return userRepository.findAll().stream()
                .filter(u -> "ROLE_ADMIN".equals(u.getRole()))
                .count();
    }

    public long getNormalUsersCount() {
        return userRepository.findAll().stream()
                .filter(u -> "ROLE_USER".equals(u.getRole()))
                .count();
    }

    public long getTotalVulnerabilities() {
        return cveDetailRepository.count();
    }

    public List<CveDetailEntity> getRecentVulnerabilities(int limit) {
        return cveDetailRepository.findAll().stream()
                .sorted((v1, v2) -> Double.compare(v2.getMachine().getCveScore(), v1.getMachine().getCveScore()))
                .limit(limit)
                .toList();
    }
    public Map<String, Integer> getUsersByMonth() {
        // Initialiser la map avec tous les mois à 0
        Map<String, Integer> usersByMonth = new LinkedHashMap<>();
        for (Month month : Month.values()) {
            usersByMonth.put(month.getDisplayName(TextStyle.SHORT, Locale.FRANCE), 0);
        }

        // Compter les utilisateurs par mois de création
        userRepository.findAll().forEach(user -> {
            if (user.getDateCreation() != null) {
                Month m = user.getDateCreation().getMonth();
                String monthName = m.getDisplayName(TextStyle.SHORT, Locale.FRANCE);
                usersByMonth.put(monthName, usersByMonth.getOrDefault(monthName, 0) + 1);
            }
        });

        return usersByMonth;
    }
}
