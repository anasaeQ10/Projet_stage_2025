package com.vulnerabilityscanner.vscanner.services;

import com.vulnerabilityscanner.vscanner.entities.MachineScan;
import com.vulnerabilityscanner.vscanner.repositories.MachineScanRepository;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.InetAddress;

@Service
public class NetworkScanService {

    private final MachineScanRepository machineScanRepository;

    public NetworkScanService(MachineScanRepository machineScanRepository) {
        this.machineScanRepository = machineScanRepository;
    }

    // üîπ R√©cup√©rer le sous-r√©seau local (ex: 192.168.1)
    private String getSubnet() throws Exception {
        InetAddress localHost = InetAddress.getLocalHost();
        String ip = localHost.getHostAddress();
        return ip.substring(0, ip.lastIndexOf("."));
    }

    // üîπ R√©cup√©rer MAC depuis ARP pour une IP
    private String getMacFromArp(String ip) {
        try {
            Process p = Runtime.getRuntime().exec("arp -n " + ip);
            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.contains(ip)) {
                    String[] tokens = line.split(" ");
                    for (String token : tokens) {
                        if (token.matches("([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}")) {
                            return token.toUpperCase();
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "UNKNOWN";
    }

    // üîπ Scanner le r√©seau et stocker toutes les machines d√©tect√©es
    public void scanNetworkAndSaveMachines() {
        try {
            String subnet = getSubnet();
            System.out.println("Scan r√©seau : " + subnet + ".0/24");

            for (int i = 1; i < 255; i++) {
                String ip = subnet + "." + i;
                InetAddress addr = InetAddress.getByName(ip);

                if (addr.isReachable(100)) { // Timeout 100ms
                    String mac = getMacFromArp(ip);

                    MachineScan machine = machineScanRepository.findByIpAddress(ip)
                            .orElse(new MachineScan());

                    machine.setIpAddress(ip);
                    machine.setMacAddress(mac);
                    machine.setOperatingSystem("UNKNOWN");
                    machine.setManufacturer("UNKNOWN");

                    machineScanRepository.save(machine);
                    System.out.println("Machine d√©tect√©e : " + ip + " / " + mac);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
