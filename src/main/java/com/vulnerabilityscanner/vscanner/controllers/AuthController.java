package com.vulnerabilityscanner.vscanner.controllers;

import com.vulnerabilityscanner.vscanner.entities.User;
import com.vulnerabilityscanner.vscanner.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@Controller
public class AuthController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @GetMapping("/login")
    public String showLoginForm() {
        return "login"; // Affiche login.html
    }

    @PostMapping("/login")
    public String processLogin(@RequestParam String email,
                               @RequestParam String password,
                               Model model) {
        Optional<User> optionalUser = userRepository.findByEmail(email);
        if (optionalUser.isPresent()) {
            User user = optionalUser.get();
            if (passwordEncoder.matches(password, user.getPassword())) {
                model.addAttribute("success", "Connexion réussie. Bienvenue " + user.getPrenom() + " !");
                return "/dashboard"; // Redirige vers dashboard.html
            } else {
                model.addAttribute("error", "Mot de passe incorrect.");
            }
        } else {
            model.addAttribute("error", "Utilisateur introuvable.");
        }
        return "login";
    }


    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new User());
        return "register"; // fichier templates/register.html
    }

    @PostMapping("/register")
    public String register(@RequestParam String prenom,
                           @RequestParam String nom,
                           @RequestParam String email,
                           @RequestParam String password,
                           @RequestParam String pays,
                           Model model) {
        if (userRepository.findByEmail(email).isPresent()) {
            model.addAttribute("error", "Email déjà utilisé.");
            return "register";
        }

        User user = new User();
        user.setPrenom(prenom);
        user.setNom(nom);
        user.setEmail(email);
        user.setPays(pays);
        user.setPassword(passwordEncoder.encode(password));
        userRepository.save(user);

        model.addAttribute("success", "Utilisateur enregistré avec succès.");
        return "register";
    }
}
