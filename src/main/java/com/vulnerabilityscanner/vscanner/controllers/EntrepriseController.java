package com.vulnerabilityscanner.vscanner.controllers;

import com.vulnerabilityscanner.vscanner.entities.Entreprise;
import com.vulnerabilityscanner.vscanner.entities.Machine;
import com.vulnerabilityscanner.vscanner.entities.User;
import com.vulnerabilityscanner.vscanner.repositories.EntrepriseRepository;
import com.vulnerabilityscanner.vscanner.repositories.UserRepository;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import java.util.*;
import java.util.stream.Collectors;

@Controller
public class EntrepriseController {

    private final EntrepriseRepository entrepriseRepository;
    private final UserRepository userRepository;

    public EntrepriseController(EntrepriseRepository entrepriseRepository, UserRepository userRepository) {
        this.entrepriseRepository = entrepriseRepository;
        this.userRepository = userRepository;
    }

    @GetMapping("/entreprise/cartographie")
    public String cartographie(Model model, @AuthenticationPrincipal UserDetails currentUser) {

        // Récupérer l'utilisateur connecté
        User user = userRepository.findByEmail(currentUser.getUsername())
                .orElseThrow(() -> new RuntimeException("Utilisateur non trouvé"));

        Entreprise entreprise = user.getEntreprise();
        if (entreprise == null) {
            throw new RuntimeException("L'utilisateur n'appartient à aucune entreprise");
        }

        // Regrouper les machines par étage
        Map<Integer, List<Machine>> machinesParEtage =
                entreprise.getMachines().stream()
                        .collect(Collectors.groupingBy(Machine::getFloor));

        // Ajouter les étages vides si l'entreprise a des étages sans machine
        for (int i = 1; i <= entreprise.getNumberOfFloors(); i++) {
            machinesParEtage.putIfAbsent(i, new ArrayList<>());
        }

        // Trier les étages du plus haut au plus bas
        Map<Integer, List<Machine>> machinesParEtageTries = machinesParEtage.entrySet().stream()
                .sorted(Map.Entry.<Integer, List<Machine>>comparingByKey().reversed())
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        Map.Entry::getValue,
                        (e1, e2) -> e1,
                        LinkedHashMap::new
                ));

        model.addAttribute("entreprise", entreprise);
        model.addAttribute("machinesParEtage", machinesParEtageTries);
        return "entreprise/cartographie";
    }
}
