package com.vulnerabilityscanner.vscanner.controllers;

import com.vulnerabilityscanner.vscanner.entities.User;
import com.vulnerabilityscanner.vscanner.services.UserService;
import jakarta.validation.Valid;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
public class DashboardController {

    private final UserService userService;

    public DashboardController(UserService userService) {
        this.userService = userService;
    }

    // Affichage tableau de bord
    @GetMapping("/dashboard")
    public String showDashboard(
            @RequestParam(value = "search", required = false) String searchTerm,
            Model model,
            Authentication authentication) {
        try {
            User currentUser = userService.getCurrentUser(authentication);
            model.addAttribute("currentUser", currentUser);

            List<User> users = (searchTerm != null && !searchTerm.isEmpty())
                    ? userService.searchUsers(searchTerm)
                    : userService.getAllUsers();

            model.addAttribute("users", users);
            model.addAttribute("totalUsers", users.size());

            return "dashboard";
        } catch (Exception e) {
            return "redirect:/error";
        }
    }

    // Formulaire d'ajout d'un nouvel utilisateur
    @GetMapping("/admin/users/new")
    public String showAddUserForm(Model model) {
        model.addAttribute("user", new User());
        return "users/user-form";
    }

    // Formulaire de modification d’un utilisateur
    @GetMapping("/admin/users/edit/{id}")
    public String showEditUserForm(@PathVariable Long id, Model model) {
        User user = userService.getUserById(id);
        model.addAttribute("user", user);
        return "users/user-edit";
    }

    // Enregistrement (ajout ou modification)
    @PostMapping("/admin/users/save")
    public String saveUser(@Valid @ModelAttribute("user") User user, BindingResult result) {
        if (result.hasErrors()) return "users/user-form";
        userService.saveUser(user);
        return "redirect:/dashboard";
    }

    // Détails utilisateur
    @GetMapping("/admin/users/{id}")
    public String viewUserDetails(@PathVariable Long id, Model model) {
        User user = userService.getUserById(id);
        model.addAttribute("user", user);
        return "users/user-details";
    }

    // Suppression utilisateur
    @PostMapping("/admin/users/delete/{id}")
    public String deleteUser(@PathVariable Long id,
                             RedirectAttributes redirectAttributes) {
        userService.deleteUser(id);
        redirectAttributes.addFlashAttribute("success", "Utilisateur supprimé avec succès");
        return "redirect:/dashboard";
    }
}
