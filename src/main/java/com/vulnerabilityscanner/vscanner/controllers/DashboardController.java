package com.vulnerabilityscanner.vscanner.controllers;

import com.vulnerabilityscanner.vscanner.entities.User;
import com.vulnerabilityscanner.vscanner.entities.UserArchive;
import com.vulnerabilityscanner.vscanner.repositories.UserArchiveRepository;
import com.vulnerabilityscanner.vscanner.services.ExcelExportService;
import com.vulnerabilityscanner.vscanner.services.UserService;
import jakarta.validation.Valid;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Controller
public class DashboardController {

    private final UserService userService;
    private final UserArchiveRepository userArchiveRepository;
    private final ExcelExportService excelExportService;

    public DashboardController(UserService userService, UserArchiveRepository userArchiveRepository, ExcelExportService excelExportService) {
        this.userService = userService;
        this.userArchiveRepository = userArchiveRepository;
        this.excelExportService = excelExportService;
    }

    // Affichage tableau de bord
    @GetMapping("/dashboard")
    public String showDashboard(
            @RequestParam(value = "search", required = false) String searchTerm,
            Model model,
            Authentication authentication) {
        try {
            User currentUser = userService.getCurrentUser(authentication);
            model.addAttribute("currentUser", currentUser);

            List<User> users = (searchTerm != null && !searchTerm.isEmpty())
                    ? userService.searchUsers(searchTerm)
                    : userService.getAllUsers();

            model.addAttribute("users", users);
            model.addAttribute("totalUsers", users.size());

            return "dashboard";
        } catch (Exception e) {
            return "redirect:/error";
        }
    }

    // Formulaire d'ajout d'un nouvel utilisateur
    @GetMapping("/admin/users/new")
    public String showAddUserForm(Model model) {
        model.addAttribute("user", new User());
        return "users/user-form";
    }

    // Formulaire de modification d’un utilisateur
    @GetMapping("/admin/users/edit/{id}")
    public String showEditUserForm(@PathVariable Long id, Model model) {
        User user = userService.getUserById(id);
        model.addAttribute("user", user);
        return "users/user-edit";
    }

    @PostMapping("/admin/users/save")
    public String saveUser(@Valid @ModelAttribute("user") User user,
                           BindingResult result,
                           Model model) {

        Optional<User> optionalUser = userService.findByEmail(user.getEmail());
        if (optionalUser.isPresent()) {
            User existingEmailUser = optionalUser.get();
            if (!existingEmailUser.getId().equals(user.getId())) {
                result.rejectValue("email", "error.user", "Cet email est déjà utilisé.");
            }
        }

        if (user.getId() == null && userService.isPasswordUsed(user.getPassword())) {
            result.rejectValue("password", "error.user", "Ce mot de passe est déjà utilisé.");
        }

        if (result.hasErrors()) {
            model.addAttribute("user", user);
            return "users/user-form";
        }

        userService.saveUser(user);
        return "redirect:/dashboard";
    }


    // Détails utilisateur
    @GetMapping("/admin/users/{id}")
    public String viewUserDetails(@PathVariable Long id, Model model) {
        User user = userService.getUserById(id);
        model.addAttribute("user", user);
        return "users/user-details";
    }

    // Suppression utilisateur
    @PostMapping("/admin/users/delete/{id}")
    public String deleteUser(@PathVariable Long id,
                             RedirectAttributes redirectAttributes) {
        userService.deleteUser(id);
        redirectAttributes.addFlashAttribute("success", "Utilisateur supprimé avec succès");
        return "redirect:/dashboard";
    }

    @GetMapping("/admin/users/export")
    public ResponseEntity<byte[]> exportUsersReport() {
        try {
            List<User> activeUsers = userService.getAllUsers();
            List<UserArchive> archivedUsers = userArchiveRepository.findAll();

            byte[] excelContent = excelExportService.generateUsersReport(activeUsers, archivedUsers);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", "rapport_utilisateurs.xlsx");

            return ResponseEntity.ok()
                    .headers(headers)
                    .body(excelContent);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }
}

