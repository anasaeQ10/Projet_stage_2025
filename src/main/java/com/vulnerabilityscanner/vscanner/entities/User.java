package com.vulnerabilityscanner.vscanner.entities;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import jakarta.validation.constraints.Pattern;
import lombok.Data;
import java.time.LocalDate;
import java.time.LocalDateTime;


@Data
@Entity
public class User {
    @Id
    @GeneratedValue
    private Long id;
    private String matricule;
    private String nom;
    private String prenom;
    private LocalDate dateNaissance;
    @Column(unique = true, nullable = false)
    @Email(message = "Email invalide")
    @NotBlank(message = "Email requis")
    private String email;
    private String adresse;
    private String pays;
    private String ville;
    private String telephone;
    private LocalDateTime dateEmbauche ;
    private LocalDateTime dateCreation = LocalDateTime.now();
    @Column(nullable = false)
    @NotBlank(message = "Mot de passe requis")
    @Size(min = 8, message = "Minimum 8 caractères")
    @Pattern(
            regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&]).*$",
            message = "Doit contenir majuscule, minuscule, chiffre et caractère spécial"
    )
    private String password;

    private String role = "ROLE_USER";
    // getters & setters

    // Générer automatiquement le matricule après insertion en BD
    @PostPersist
    public void generateMatricule() {
        if (matricule == null && pays != null && dateEmbauche != null) {
            String codePays = pays.substring(0, 2).toUpperCase(); // ex : MA
            String idStr = String.format("%02d", this.id);        // ex : 01, 02, ...
            String annee = String.valueOf(dateEmbauche.getYear()); // ex : 2025
            this.matricule = codePays + "-" + idStr + "-" + annee;
        }
    }

    public String getNom() {
        return nom;
    }
}


